tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url "https://jitpack.io"
    }
}

apply plugin: "groovy"
apply plugin: 'java'
apply plugin: 'jacoco'
apply plugin: 'maven'
apply plugin: 'application'
apply plugin: 'com.bmuschko.docker-remote-api'

sourceCompatibility = '1.8'
targetCompatibility = '1.8'
version = rootProject.version.toString()

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

group = "com.containersol.minimesos"

dependencies {
    compile 'org.codehaus.groovy:groovy-all:2.4.5'
    compile 'com.github.docker-java:docker-java:3.0.0'
    compile 'junit:junit:4.11'
    compile 'com.jayway.awaitility:awaitility:1.6.3'
    compile 'com.mashape.unirest:unirest-java:1.4.8'
    compile 'org.slf4j:slf4j-api:1.7.12'

    compile 'ch.qos.logback:logback-core:1.1.3'
    compile 'ch.qos.logback:logback-classic:1.1.3'

    compile 'com.beust:jcommander:1.48'

    testCompile "org.mockito:mockito-core:1.+"
    // using guru.nidi as maintenanance of the original project is dropped https://github.com/clarkware/jdepend/pull/9
    testCompile "guru.nidi:jdepend:2.9.5"
}

sourceSets {
    main {
        groovy {
            // this makes the groovy-compiler compile groovy- as well as java-files.
            // Needed, because java is normally compiled before groovy.
            // Since we are using groovy objects from java, we need it the other way round.
            srcDirs = ['src/main/groovy', 'src/main/java']
        }
        java {
            srcDirs = [] // don't compile Java code twice
        }
    }
}

mainClassName = "com.containersol.minimesos.main.Main"

jar {
    baseName = "minimesos"
    manifest {
        attributes(
                'Main-Class': mainClassName,
                'Implementation-Version': project.version
        )
    }
    exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
}

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
    }
}

task executableJar(type: Jar) {
    baseName = "minimesos"
    classifier = "all"
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
    manifest {
        attributes(
                'Main-Class': mainClassName,
                'Implementation-Version': project.version
        )
    }
    exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
}

task installMinimesosScript(type: Copy) {
    from "$rootDir/bin/minimesos"
    into "/usr/local/bin"
}


artifacts {
    archives executableJar
}

test {
    testLogging {
        showStandardStreams = true
    }
}

