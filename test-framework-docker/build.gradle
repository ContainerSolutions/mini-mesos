import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage
import com.bmuschko.gradle.docker.tasks.image.DockerTagImage

subprojects {

    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    }

    task showDeps(type: DependencyReportTask) {}

    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
    version = rootProject.version.toString()

    [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

    dependencies {

        compile "org.apache.mesos:mesos:${mesosVer}"
        compile 'com.google.code.gson:gson:2.3'         // marshalling between the scheduler and executor

        testCompile 'junit:junit:4.12'
        testCompile "org.mockito:mockito-all:1.9.5"

    }

    test {
        testLogging {
            showStandardStreams = true
        }
    }

    afterEvaluate { project ->
        if (new File(project.projectDir, 'Dockerfile').exists()) {
            if (!project.hasProperty('imageName')) {
                throw new GradleException('Root directory of ' + project.name
                        + ' contains Dockerfile, but it does not define project.ext.imageName value')
            }
            docker.url = 'unix:///var/run/docker.sock'
            if (!System.properties['os.name'].equals('Mac OS X')) {
                docker.certPath = null
            }
            if (System.env.DOCKER_HOST) {
                docker.url = "$System.env.DOCKER_HOST".replace("tcp", "https")
                if (System.env.DOCKER_CERT_PATH) {
                    docker.certPath = new File(System.env.DOCKER_CERT_PATH)
                }
            }
            task buildDockerImage(type: DockerBuildImage, dependsOn: [taskCopyFilesForDocker], description: 'build Docker image') {
                inputDir = file(project.projectDir)
                tag = project.imageName
            }
            project.build.dependsOn buildDockerImage
            ['latest', 'version'].each { aTag ->
                String uppercasedName = aTag.capitalize()
                task "tagDockerImageWith$uppercasedName"(type: DockerTagImage, description: 'tag Docker image') {
                    imageId = project.imageName
                    tag = ('version'.equals(aTag)) ? project.version : aTag
                    repository = project.imageName
                    force = true
                }
                task "publishDockerImageWith$uppercasedName"(type: DockerPushImage, dependsOn: ["tagDockerImageWith$uppercasedName"],
                        description: 'publish Docker image') {
                    imageName = project.imageName
                    tag = ('version'.equals(aTag)) ? project.version : aTag
                    doFirst {
                        ['dockerHubUsername', 'dockerHubPassword', 'dockerHubEmail'].each {
                            assert project.hasProperty(it): 'Undefined "' + it + '" property'
                        }
                        docker {
                            registryCredentials {
                                username = project.property('dockerHubUsername')
                                password = project.property('dockerHubPassword')
                                email = project.property('dockerHubEmail')
                            }
                        }
                    }
                }
            }
        }
    }
}
