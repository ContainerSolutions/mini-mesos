apply plugin: 'application'

import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage
import com.bmuschko.gradle.docker.tasks.image.DockerTagImage

dependencies {
    compile 'com.beust:jcommander:1.48'
    compile 'org.slf4j:slf4j-api:1.7.12'

    compile project(':minimesos')

    testCompile 'junit:junit:4.11'
    testCompile "org.mockito:mockito-core:1.+"
    testCompile "guru.nidi:jdepend:2.9.5"
}

mainClassName = "com.containersol.minimesos.main.Main"

ext {
    imageName = repository + '/minimesos-cli'
}

jar {
    baseName = "minimesos-cli"
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    manifest {
        attributes(
                'Main-Class': mainClassName,
                'Implementation-Version': project.version
        )
    }
    exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
}

artifacts {
    archives jar
}

task copyFilesForDocker(type: Copy) {
    dependsOn 'jar'
    from "build/libs/minimesos-cli-${project.version}.jar"
    into 'build/docker'
    rename { String fileName ->
        fileName.replace("-${project.version}", "")
    }
}

task copyDockerfile(type: Copy) {
    dependsOn 'copyFilesForDocker'
    from "Dockerfile"
    into 'build/docker'
}

task buildDockerImage(type: DockerBuildImage, dependsOn: [copyDockerfile], description: 'build Docker image') {
    inputDir = new File("${buildDir}/docker")
    setTag(project.imageName)
}

afterEvaluate { project ->
    for (tag in ['snapshot', 'version']) {
        String uppercasedTag = tag.capitalize()

        task "tagDockerImageWith$uppercasedTag"(type: DockerTagImage, description: 'tag Docker image') {
            setImageId(project.imageName)
            setTag('version' == tag ? project.version : tag)
            setRepository(project.imageName)
            setForce(true)
        }

        task "publishDockerImageWith$uppercasedTag"(type: DockerPushImage, dependsOn: ["tagDockerImageWith$uppercasedTag"],
                description: 'publish Docker image') {
            setImageName(project.imageName)
            setTag('version' == tag ? project.version : tag)
        }
    }
}

project.build.dependsOn buildDockerImage
assemble.dependsOn jar
